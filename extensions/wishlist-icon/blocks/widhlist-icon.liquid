<div class="wishlist-app" x-data="wishlist">
  <button class="wishlist-app__addTo--btn" type="button" @click.debounce="addToWishlist()">
    <svg class="wishlist-app__icon--svg" viewBox="0 0 24 24" stroke-width="2" stroke="#000" :fill="wishlisted ? '{{ block.settings.color }}': '#fff' ">
      <path d="M12 21.35l-1.45-1.32C5.4 15.73 2 12.27 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.77-3.4 7.23-8.55 11.53L12 21.35z"/>
    </svg>
    {% if block.settings.text != blank %}
      <span class="wishlist-app__icon--text" x-text="wishlisted ? '{{ block.settings.active_text }}' : '{{ block.settings.text }}'"></span>
    {% endif %}
  </button>

  <button type="button" class="wishlist-app__show-btn" @click="showModal = true">
    {{ 'wishlist.viewBtn' | t }}
  </button>

  <div class="wishlist-modal" x-show="showModal" style="display: none;">
    <div class="wishlist-modal__content" @click.away="showModal = false">
      <h2 class="wishlist-modal__content--title">{{ 'wishlistModal.title' | t }} ðŸ’–</h2>
      <hr>
      <template x-if="wishlistItems.length > 0">
        <ul class="wishlist-modal__content--list">
          <template x-for="item in wishlistItems" :key="item.id">
            <li class="wishlist-item">
              <img :src="item.image" alt="" class="wishlist-item__image" width="100%" height="100%">
              <div class="wishlist-item__details">
                <p class="wishlist-item__details--title" x-text="item.title"></p>
                <div class="wishlist-item__details--actions">
                  <p class="wishlist-item__details--price" x-text="item.price"></p>
                  <button class="wishlist-item__add-to-cart" @click="addToCart(item.id)">{{ 'wishlistModal.addToCartBtn' | t }}</button>
                </div>
                <button class="wishlist-item__remove" @click="removeFromWishlist(item.id)">âœ•</button>
              </div>
            </li>
          </template>
        </ul>
      </template>
      <p class="wishlist-modal__content--text" x-show="wishlistItems.length === 0">{{ 'wishlistModal.emptyModal' | t }}</p>

      <button class="wishlist-modal__close" @click="showModal = false" style="font-size: 20px;">âœ•</button>
    </div>
  </div>
</div>

<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('wishlist', () => ({
      wishlisted: false,
      showModal: false,
      wishlistItems: [],
      cart: { items: [] },

      init() {
        this.loadWishlist();
        this.wishlisted = this.wishlistItems.some(item => item.id === "{{ product.id }}");
        this.watchCartChanges();
        this.fetchCart().then(cart => {
          this.cart = cart;
        });
      },

      async fetchCart() {
        const response = await fetch('/cart.js');
        const cart = await response.json();
        console.log('Cart fetched:', cart);
        return cart;
      },

      async watchCartChanges() {
        const observer = new PerformanceObserver((list) => {
          list.getEntries().forEach(entry => {
            if (['xmlhttprequest', 'fetch'].includes(entry.initiatorType) && /\/cart\//.test(entry.name)) {
              this.updateCart();
            }
          });
        });
        observer.observe({ entryTypes: ['resource'] });
      },

      async updateCart() {
        const newCart = await this.fetchCart();
        this.cart = newCart;
        this.$nextTick(() => {
          console.log('Cart updated:', this.cart);
        });
        document.dispatchEvent(new CustomEvent('cart:refresh', { bubbles: true, detail: newCart }));
      },

      addToWishlist() {
        const productData = {
          id: "{{ product.id }}",
          variantId: "{{ product.variants.first.id }}",
          title: "{{ product.title }}",
          price: "{{ product.price | money }}",
          image: "{{ product.featured_image | img_url: 'original' }}",
        };

        let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
        const productIndex = wishlist.findIndex(item => item.id === productData.id);

        if (this.wishlisted) {
          wishlist.splice(productIndex, 1); // Remove product
          this.wishlisted = false;
        } else {
          wishlist.push(productData); // Add product
          this.wishlisted = true;
        }

        localStorage.setItem('wishlist', JSON.stringify(wishlist));
        this.loadWishlist();
      },

      loadWishlist() {
        this.wishlistItems = JSON.parse(localStorage.getItem('wishlist')) || [];
      },

      removeFromWishlist(productId) {
        let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
        wishlist = wishlist.filter(item => item.id !== productId);

        localStorage.setItem('wishlist', JSON.stringify(wishlist));
        this.loadWishlist();

        if (productId === "{{ product.id }}") {
          this.wishlisted = false;
        }
      },

      addToCart(productId) {
        console.log('Adding product to cart:', productId);

        const wishlistProduct = this.wishlistItems.find(item => item.id === productId);

        if (!wishlistProduct) {
          console.error('Product not found in wishlist');
          return;
        }

        const variantId = wishlistProduct.variantId;

        fetch(window.Shopify.routes.root + 'cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: variantId, quantity: 1 }),
        })
          .then(response => {
            if (!response.ok) throw new Error('Failed to add to cart.');
            return response.json();
          })
          .then(() => {
            this.updateCart();
            document.dispatchEvent(new CustomEvent('cart:added', { bubbles: true }));
            alert('Product added to cart!');
          })
          .catch(error => {
            console.error('Error adding to cart:', error);
            alert('Something went wrong while adding the product to the cart.');
          });
      },
    }));
  });
</script>

<style>
  .wishlist-app {
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 44rem;
    gap: 1rem;
  }

  .wishlist-app__addTo--btn,
  .wishlist-app__show-btn
  {
    width: 50%;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    height: 40px;
    color: #fff;
    background: #000;
    border-radius: 5px;
    border: 1px solid transparent;
    letter-spacing: 1px;
  }

  .wishlist-app__addTo--btn:hover,
  .wishlist-app__show-btn:hover {
    background: #fff;
    color: #000;
    border: 1px solid #000;
    transition: 0.2s all ease;
  }
  
  .wishlist-app__icon--svg {
    width: 20px;
    height: 20px;
  }

  .wishlist-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 99999999999999 !important;
    overflow: hidden;
  }
  .wishlist-modal__content {
    position: relative;
    max-width: 1200px;
    min-width: 320px;
    width: 100%;
    min-height: 60vh;
    max-height: 90vh;
    background: #fff;
    margin-top: 50px !important;
    margin: 0 10px;
    padding: 10px;
    border-radius: 8px;
    overflow-y: auto;
  }
  .wishlist-modal__content--list {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    padding: 0;
    margin: 0 20px 15px 20px;
  }
  .wishlist-modal__content--title {
    font-size: 21px;
    margin: 15px 20px;
  }
  hr {
    margin: 20px;
  }
  .wishlist-modal__content--text {
    text-align: center;
  }
  .wishlist-item__details--price {
    width: 40%;
    margin: 10px 0;
    font-size: 14px;
    text-align: center;
    line-height: normal;
  }
  .wishlist-modal__close,
  .wishlist-item__remove
  {
    position: absolute;
    top: 20px;
    right: 30px;
    cursor: pointer;
    border: none;
    background: none;
    padding: 0;
  }
  .wishlist-item__remove{
    top: 3px;
    right: 6px;
  }
  .wishlist-item {
    max-width: 220px;
    border: 1px solid #cccccc;
    background: #f9fafb;
    border-radius: 5px;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-direction: column;
    padding: 10px;
    height: auto;
  }
  .wishlist-item__details--title {
    text-align: center;
    line-height: normal;
  }
  .wishlist-item__details--actions {
    display: flex;
    justify-content: space-between;
    border: 1px solid #000;
    border-radius: 5px;
  }
  .wishlist-item__add-to-cart {
    width: 60%;
    border: 1px solid transparent;
    color: #fff;
    padding: 4px 8px;
    background: #000;
    border-radius: 5px;
    cursor: pointer;
  }
  .wishlist-item__add-to-cart:hover {
    background: #3f3f3f;
  }
  .wishlist-item__image {
    object-fit: cover;
    border-radius: 4px;
  }
</style>

{% schema %}
{
  "name": "Wishlist icon",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "product",
      "autofill": true
    },
    {
      "type": "text",
      "id": "text",
      "label": "Text",
      "default": "Add to wishlist"
    },
    {
      "type": "text",
      "id": "active_text",
      "label": "Wishlisted Text",
      "default": "Added to Wishlist"
    },
    {
      "type": "color",
      "id": "color",
      "label": "Icon Color",
      "default": "#ff0000"
    }
  ]
}
{% endschema %}
